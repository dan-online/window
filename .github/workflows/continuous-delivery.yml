name: Continuous Delivery

on:
  push:
    tags:
      - 'v*'

jobs:
    binary:
        name: Release
        strategy:
            fail-fast: false # don't fail other jobs if one fails
            matrix:
                settings:
                  - os: ubuntu-24.04
                    rust: stable
                    target: x86_64-unknown-linux-gnu
                    cross: false
                  - os: windows-2019
                    rust: stable
                    target: x86_64-pc-windows-msvc
                    cross: false
            # build: [x86_64-linux, aarch64-linux, x86_64-macos, x86_64-windows] #, x86_64-win-gnu, win32-msvc
            # include:
            # - build: x86_64-linux
            #   os: ubuntu-24.04
            #   rust: stable
            #   target: x86_64-unknown-linux-musl
            #   cross: false
            # # - build: aarch64-linux
            # #   os: ubuntu-24.04
            # #   rust: stable
            # #   target: aarch64-unknown-linux-musl
            # #   cross: true
            # # - build: x86_64-macos
            # #   os: macos-latest
            # #   rust: stable
            # #   target: x86_64-apple-darwin
            # #   cross: false
            # - build: x86_64-windows
            #   os: windows-2019
            #   rust: stable
            #   target: x86_64-pc-windows-msvc
            #   cross: false
        runs-on: ${{ matrix.settings.os }}
        steps:
            - name: Checkout sources
              uses: actions/checkout@v4

            - name: Update Cargo.toml version
              shell: bash
              run: |
                # Extract version from the tag
                VERSION=${GITHUB_REF#refs/tags/v}
                
                # Update Cargo.toml with the new version
                sed -i "s/^version = \".*\"/version = \"${VERSION}\"/" Cargo.toml

                # Update Cargo.lock with the new version
                cargo update -p window

            - name: Install ${{ matrix.settings.rust }} toolchain
              uses: actions-rs/toolchain@v1
              with:
                profile: minimal
                toolchain: ${{ matrix.settings.rust }}
                target: ${{ matrix.settings.target }}
                override: true

            - name: Cargo Cache
              uses: actions/cache@v4
              with:
                path: |
                    ~/.cargo/bin/
                    ~/.cargo/registry/index/
                    ~/.cargo/registry/cache/
                    ~/.cargo/git/db/
                    target/
                key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - name: Install cmake
              if: matrix.settings.os == 'windows-2019'
              uses: lukka/get-cmake@latest

            - name: vcpkg build
              if: matrix.settings.os == 'windows-2019'
              uses: johnwason/vcpkg-action@v7
              id: vcpkg
              with:
                pkgs: ffmpeg
                triplet: x64-windows
                token: ${{ github.token }}
                github-binarycache: true

            - name: Install dependencies
              if: matrix.settings.os == 'ubuntu-24.04'
              run: sudo apt update -y && sudo apt install -y clang libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavutil-dev libpostproc-dev libswresample-dev libswscale-dev # build-essential g++ gcc

            - name: Build release binary
              uses: actions-rs/cargo@v1
              with:
                use-cross: ${{ matrix.settings.cross }}
                command: build
                args: --release --locked --target ${{ matrix.settings.target }}
              env:
                VCPKG_ROOT: ${{ github.workspace }}/vcpkg

            # add binary as artifact
            - name: Upload binary
              uses: actions/upload-artifact@v4
              if: matrix.settings.os == 'ubuntu-24.04'
              with:
                name: window-${{ matrix.settings.os }}-${{ matrix.settings.target }}
                path: target/${{ matrix.settings.target }}/release/window
            
            - name: Upload binary
              uses: actions/upload-artifact@v4
              if: matrix.settings.os == 'windows-2019'
              with:
                name: window-${{ matrix.settings.os }}-${{ matrix.settings.target }}
                path: target/${{ matrix.settings.target }}/release/window.exe
        
    upload_to_release:
      name: Upload to Release
      needs: binary
      permissions:
        contents: write
      runs-on: ubuntu-24.04
      steps:
      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: window-ubuntu-24.04-x86_64-unknown-linux-gnu
      
      - name: Download Windows binary
        uses: actions/download-artifact@v4
        with:
          name: window-windows-2019-x86_64-pc-windows-msvc

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
              window
              window.exe
